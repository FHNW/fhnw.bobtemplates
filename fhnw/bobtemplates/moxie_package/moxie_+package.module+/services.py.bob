import logging
import json
from datetime import datetime

from moxie.core.service import Service
from moxie.core.kv import kv_store

from moxie_{{{package.module}}}.domain import {{{package.domainobj}}}


logger = logging.getLogger(__name__)

KEY_DATA = '{{{package.module}}}'
KEY_UPDATED = 'last_updated'


class FoodService(Service):

    def __init__(self, providers=None, service_key='{{{package.module}}}'):
        """Food service
        :param providers: list of providers to be used
        :param service_key: identifier of the service, mainly used when storing data
        """
        self.provider = self._import_provider(providers.items()[0])
        self.service_key = service_key

    def import_data(self):
        """Import meal data from provider
        """
        data = self.provider.import_data()
        data = json.dumps([item.as_dict() for item in data])
        kv_store.set(self._get_key(KEY_DATA), data)
        self._set_last_updated()

    def get_data(self):
        """Get meal data from storage
        :return: Meal domain object
        """
        data = kv_store.get(self._get_key(KEY_DATA))
        if not data:
            return []
        jsondata = json.loads(data)
        return [{{{package.domainobj}}}.from_dict(item) for item in jsondata]

    def get_attribution(self):
        """Returns a dictionary containing attribution data
        """
        return self.provider.ATTRIBUTION

    def get_last_updated(self):
        """Get date of last update
        """
        return kv_store.get(self._get_key(KEY_UPDATED))

    def _get_key(self, key):
        """Get key used in kv store
        :param key: key to format
        :return: key formatted
        """
        return "{app}_{key}".format(app=self.service_key, key=key)

    def _set_last_updated(self):
        """Set the last updated date to now
        """
        kv_store.set(self._get_key(KEY_UPDATED), datetime.now().isoformat())
